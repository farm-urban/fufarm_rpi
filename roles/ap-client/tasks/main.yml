---
# - name: Clean up APT
#   apt:
#     update_cache: yes
#     upgrade: dist
#     autoremove: yes
#     autoclean: yes
#   become: yes

- name: Install required software packages
  ansible.builtin.apt:
    cache_valid_time: 300 # 5 minutes
    pkg:
      #- dhcpcd # Present by default
      - dnsmasq
      - hostapd
      - iptables-persistent  # auto-loads iptables rules on boot
    state: present

- name: Enable and unmask hostapd
  ansible.builtin.systemd:
    name: hostapd
    enabled: yes
    masked: no

- name: Enable and unmask dnsmasq
  ansible.builtin.systemd:
    name: dnsmasq
    enabled: yes
    masked: no

#
# Wireless interfaces
#
# Create wifi_ap_interface
# This doesn't seem to come up without a reboot - not sure why
- name: Create udev file for ap interface
  ansible.builtin.template:
    src: templates/90-wireless.rules.j2
    dest: /etc/udev/rules.d/90-wireless.rules

- name: Configure ap interface
  ansible.builtin.template:
    src: templates/ap.j2
    dest: /etc/network/interfaces.d/ap


## For now we assume that the wifi client has been set up
## look at /usr/bin/raspi-config - it seems to use wpa_cli to set everything up
# Set up wifi_client_interface configuration
# - name: Backup wpa_supplicant.conf file prior to deletion
#   copy:
#     remote_src: True
#     src: /etc/wpa_supplicant/wpa_supplicant.conf
#     dest: /etc/wpa_supplicant/wpa_supplicant.conf.bak

# - name: Delete wpa_supplicant file
#   file:
#     path: /etc/wpa_supplicant/wpa_supplicant.conf
#     state: absent

# - name: create wireless interface file
#   template:
#     src: templates/wpa_supplicant-interface.conf.j2
#     dest: /etc/wpa_supplicant/wpa_supplicant-{{ wifi_client_interface }}.conf
#   notify:
#   - reload wpa_supplicant


# Access point configuration
- name: Configure dnsmasq
  ansible.builtin.template:
    src: templates/dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf

- name: Configure hostapd
  ansible.builtin.template:
    src: templates/hostapd.conf.j2
    dest: /etc/hostapd/hostapd.conf

  # - name: Creating hostapd deamon file
  #   copy:
  #     dest: "/your path"
  #     content: |
  #       # {{ ansible_managed }}
  #       DAEMON_CONF="/etc/hostapd/hostapd.conf"

- name: Configure dhcpcd
  ansible.builtin.blockinfile:
    path: /etc/dhcpcd.conf
    block: |
      interface {{ wifi_ap_interface }}
          #static ip_address={{ wifi_ap_address }}/24 # Not required currently as we use the interface file
          nohook wpa_supplicant


# Firewall configuration
## rpi docs recommend: /etc/sysctl.d/routed-ap.conf
- name: Enable IP forwarding
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

## Configure firewall with iptables
- name: Install iptables rules
  template:
    src: templates/iptables.v4.j2
    dest: /etc/iptables/rules.v4

# This will load a state from a file, with a rollback in case of access loss
- name: restore firewall state from a file
  community.general.iptables_state:
    state: restored
    path: /etc/iptables/rules.v4
  async: "{{ ansible_timeout }}"
  poll: 0
  notify:
    - Restart network # Do this at end rather then restarting each individual service

